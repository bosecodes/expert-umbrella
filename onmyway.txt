8. Install VSCode
9. Learn FlexBox, Grid, use rem instead of px and advanced CSS and SASS.
10. JS: DOM Maniputlation and Events, JSON, Fetch API, ES6+ (Arrow functions, promises, async/await, destructuring)

HTML, CSS, SASS, VanillaJS: Basic Front-End Web Developer
11. What next?
1. Full Stack Web dev?
2. Back End(Server side Language and Database)
HTML / CSS Framework, Git and Tooling, Front End JS Framework, Server Side Language and DataBase

HTML/CSS Frameworks area becoming a bit less relevant but I would still suggest learning one. They can make your life much easier and great for prototyping.
BootStrap <--- most popular
Materialize
Bulma
(used for quick website building)

Git and Tooling: GIT is absolutely necessary for all web developers. Here are some other tooling suggestions.
Basic Command Line
Git Version Control
NPM(preferred) or Yarn
WebPack or Parcel(preferred) <-- module bundling
Gulp(preferred) or Grunt <-- task runners (notnecessary)
Editor Extensions: ESLint, Prettier, Live Server, etc.

Front End Frameworks: (Choose at least 1)

It is becoming a necessity to learn a JS front-end framework

--Very Popular in the industry
--More interactive & interesting UIs.
--Components & modular front end code
--Good for teams

React.. MOST POPULAR
Vue.. EASY TO USE AND REALLY GAINING TRACTION
Angular.. Fading a bit- used in enterprise



State Management: For larger apps with a framework, you may need to learn methods to manage app-level state
1. Redus, context API .. React
2. Apolo (GraphQL Client)
3. VueX
4. NgRx
Concepts: Immutable State, Stores, Reducers, Mutations, Getters, Actions, Observables.

*** Suggested YouTube Videos:
Redux Crash Course, React & Context API Project --> Traversy Media
*** Suggested Udemy Courses: React Front to Back, MERN Stack Front to Back

**** NOW you are a FULL FLEDGED FRONT-END Web Developer
-- Build incredible Front-end applications
-- Smooth and Steady front-end workflow
-- Work well with teams and familiar with Git
-- Connect to Backend APIs and work with data

YOu should be able to get a front-end job or work for yourself and do pretty well...

Server Side Language: Choose one:
To be a full stack or software engineer, you will need to learn a server-side language/technology

Node.js
Python
PHP
C# <-- ASP.NET 
Go <-- Incredible Frameworks and gaining popularity
Ruby <-- Falling Popularity

Things to learn:
Fundamental Syntax
Structure & WorkFlow
Package Management
HTTP / Routing

***Suggested youtube videos: Node.js for beginners
Python fundatmentals, PHP Front to Back, C# Project in 60 seconds, Go CrashCourse

***UDEMY: Node.js dev to deployment
MVC PHP OOP
Python Django Dev to Deployment

Do not reinvent the wheel. Learn a framework to better build better and faster. Don't put to much effort into researching more about language, put to use the different frameworks.

for,
Node.js : Express(prefferred), Koa, Adonis
Python: Django(prefferred), Flask
PHP: Laravel(preferred), Symfony
C#: ASP.NET

Suggested YouTube Videos: Ecpress Crash Course, Koa CrashCouse, Adonis Series, Django Crash Course, Flask Series, Laravel Series, Symfony Series, C#.NET App in 60 minutes
Suggested UDEMY: Node.js dev to deployment, Python Django Dev to Deployment

DataBase: Choose one or two

Most applications will use some kind of database. There are different types, here are some options.

Relational Database: MySQL, PostSQL, MS SQL
NoSQL: MongoDB, CouchBase
Cloud: FireBase, AWS, Azure DocumentDB
Lightweight: SQLite, NeDB, Redis

SQL Crash Course, MongoDB in 30 minutes, Redis Crash Course


Server Rendered Pages:
Frameworks like React, Vue and Angular can also be rendered on the server which can actually make things relatively easier
Next.js
Nuxt.js
Angular Universal -- Angular

Comtent Management Systems: Choose One:
PHP based: WordPress, Drupal
JS based Ghost, Keystone
Python Based: Mezzazine
.NET: Piranha

DevOps, and Deployment & MORE:
Learning languages and frameworks is one thing, setting up environments, testing and deployment is another
Deployment: Linux, SSH, Git, Server, Software(Nginx, Apache)
Platforms: Digital Ocean, AWS, Heroku, Azure
Virtualization: Docker(preffered), Vagrant
Testing: Unit, Integration, Functional, System

Suggested youtube: Getting started with Docker, Vagrant Crashcourse, Jest Testing, Deploy Node apps

*****FULL STACK BASDASS************
---Setup full stack dev environments and workflows
---Build Back-end APIs and Micro-services
---Work with Databases
---Construct full-stack apps (Front-end framework and server)
---Deploy to the cloud(SSH, Git, Servers, etc.)
you're a friggin' rockstar!

-----------------------------------------------------
Mobile Development::: Choose one
There are some frameworks that allow us to create native apps with web technologies:
React Native, BUild native apps with react
NativeScript::: Angular, TypeScript, JavaScript
Ionic ::: Hybrid apps with HTML, CSS, JS
Flutter ::: Mobile SDK for Android and iOS (Uses Dart)
Xamarin ::: Mobile apps with C#

-----------------------------------------------------

Desktop APPS WITH Electron:::
Electron us used to build powerful cross-platform applications using JS.
-- uses chromium adn node.js
-- compatible with windows, linux, macOS
-- Crash reporting, debugging, profiling

-------------------------------------------------------

GraphQL and Apollo: 
GraphQL is a revolutionary new way to think about APIs. Query language that is much less rigid that the standard REST.
----------------------------------------------------

TypeScript: Superset of JS with additional features including static typing.
----------------------------------------------------
